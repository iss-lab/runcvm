#!/bin/bash -e

NODE=01-mariadb

nodes() {
  echo $NODE-mysqld $NODE-mysql
}

volumes() {
  echo ''
}

networks() {
  echo $NODE-network
}

quit() {
  # Don't run a second time
  trap '' TERM INT EXIT
  
  # Allow this to complete, even if we encounter errors
  set +e

  echo "> ($h) Cleaning up nodes ..."
  docker rm -f $(nodes) 2>/dev/null
  echo

  if [ "$(volumes)" != "" ]; then
    echo "> ($h) Cleaning up volumes ..."
    docker volume rm -f $(volumes)
  fi
  echo

  if [ -n "$IMAGE" ]; then
    echo "> ($h) Cleaning up temporary image ..."
    docker rmi $IMAGE
    echo
  fi
  
  rm -f /tmp/iid
  
  if [ "$(networks)" != "" ]; then
    echo "> ($h) Cleaning up networks ..."
    docker network rm $(networks)
  fi
  echo

  echo "> ($h) Cleaned up"
  echo "> ($h) Exiting with code $ERRORS"
}

trap quit TERM INT EXIT

h=$(hostname)

echo "> ($h) Creating network $NODE-network ..."
docker network rm $(networks) 2>/dev/null || true
docker network create $NODE-network

echo "> ($h) Launch CVM mariadb server as $NODE-mysqld ..."
docker run -d -it --rm --runtime=runcvm --name=$NODE-mysqld --hostname=$NODE-mysqld --network=$NODE-network --cpus=1 --memory=512M --env=MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=1 mariadb

echo "> ($h) Monitoring mariadb logs ..."
docker logs -f -t -n 0 $NODE-mysqld &

# Allow final test to complete, even if we encounter errors
set +e

echo "> ($h) Waiting for mariadb startup and running test queries ..."
docker run -it --rm --network=$NODE-network --name=$NODE-mysql --hostname=$NODE-mysql --env=host=$NODE-mysqld alpine ash -c 'apk update && apk add mariadb-client && for a in $(seq 20 -1 1); do if mysql -P 3306 -h $host mysql -e ""; then echo "> $(hostname) Connected to mysqld ..."; break; else echo "> $(hostname) Waiting for mysqld (#$a) ..."; sleep 1; fi; done && mysql -P 3306 -h $host mysql -e "select count(*) from user"'
ERRORS=$?

echo "> ($h) Completed $NODE test with $ERRORS errors"

sleep 1
exit $ERRORS
