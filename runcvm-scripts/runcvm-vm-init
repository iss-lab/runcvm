#!/opt/runcvm/bin/bash

. /opt/runcvm/scripts/runcvm-ctr-defaults && PATH="$RUNCVM_PATH"

# Alpine initrd doesn't honour command-line rw flag
mount -o remount,rw /

# Unmount /run if it is a tmpfs (not a virtiofs) mounted by the initramfs
# /run may be populated in the underlying image, and may also be a volume or be bind-mounted,
# and its contents should be accessible in these cases.
if [ "$(findmnt -rnu -o FSTYPE /run)" = "tmpfs" ]; then
  busybox umount -fl /run
fi

# FIXME: virtiofs mounts aren't always made rw. Remount them all rw (if allowed)
# /opt/runcvm/bin/mount -t virtiofs | awk '{print $3}' | xargs -n 1 mount -o remount,rw

# Some systems do not set up /dev/fd. If needed, add it.
if ! [ -h /dev/fd ]; then
  ln -s /proc/self/fd /dev/fd
fi

# FIXME: This must be run early enough, otherwise other interfaces like docker0 might have started
IF=$(ls /sys/class/net/ | grep -vE '^(lo|docker)' | head -n 1)

IP=$(cat /.runcvm/net)
GW=$(cat /.runcvm/netgw)

# https://bugzilla.redhat.com/show_bug.cgi?id=501934
for i in all $IF
do
  # /sbin/sysctl -q -w -e net.ipv6.conf.$i.disable_ipv6=1 net.ipv6.conf.$i.autoconf=0 net.ipv6.conf.$i.accept_ra=0
  sysctl -q -w -e net.ipv6.conf.$i.disable_ipv6=1 net.ipv6.conf.$i.autoconf=0
done

# Bring up local interface
ip link set lo up

# Rename the first deterministically named interface to eth0
ip link set $IF name eth0 && IF=eth0
ip addr add $IP dev $IF
ip link set $IF up

# TODO
# - bind-mount or overwrite /etc/resolv.conf, /etc/hosts and /etc/hostname

route add default gw $GW

# Setup hostname
hostname -F /etc/hostname

# Mount filesystems defined in /etc/fstab OR as defined in RUNCVM_DISKS
if [ -f /.runcvm/fstab ]; then
  busybox modprobe ext4
  mount -av --fstab /.runcvm/fstab -o X-mount.mkdir
fi

# Load original environment
. /.runcvm/config

if [ "$RUNCVM_INIT" = "1" ]; then
  # If launched with '--init' (or --env=RUNCVM_INIT=1) then run our own init in place of Docker's/Podman's.

  $RUNCVM/bin/cat >/etc/inittab <<_EOE_
ttyS0::respawn:-/opt/runcvm/scripts/runcvm-vm-start
::respawn:/opt/runcvm/scripts/runcvm-vm-qemu-ga
::ctrlaltdel:/opt/runcvm/bin/poweroff
::restart:/opt/runcvm/bin/poweroff
_EOE_

  # Allow runcvm-vm-start to runs once (and only once)
  $RUNCVM/bin/rm -f /.runcvm/once

  # Clear the environment, and run our own init
  exec -c /opt/runcvm/bin/init
else
  # If not, assume the user knows what they're doing: launch qemu-ga and just run their entrypoint.

  # Clean RUNCVM env vars
  clean_env

  # Run the qemu guest agent, needed to support 'docker exec'
  $RUNCVM/scripts/runcvm-vm-qemu-ga &

  # Run init from the image
  # Pipe input/output from/to serial console
  exec </dev/ttyS0 &>/dev/ttyS0
  # Invoke runcvm-init with --no-fork purely to create controlling tty,
  # then exec runcvm-vm-start
  exec -c $RUNCVM/sbin/runcvm-init --no-fork $RUNCVM/scripts/runcvm-vm-start
fi
