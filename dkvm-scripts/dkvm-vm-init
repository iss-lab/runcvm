#!/opt/dkvm/bin/bash

. /opt/dkvm/scripts/dkvm-ctr-defaults && PATH="$DKVM_PATH"

# Alpine initrd doesn't honour command-line rw flag
mount -o remount,rw /

# FIXME: virtiofs mounts aren't always made rw. Remount them all rw (if allowed)
# /opt/dkvm/bin/mount -t virtiofs | awk '{print $3}' | xargs -n 1 mount -o remount,rw

# FIXME: This must be run early enough, otherwise other interfaces like docker0 might have started
IF=$(ls /sys/class/net/ | grep -vE '^(lo|docker)' | head -n 1)

IP=$(cat /.dkvm/net)
GW=$(cat /.dkvm/netgw)

# https://bugzilla.redhat.com/show_bug.cgi?id=501934
for i in all $IF
do
  # /sbin/sysctl -q -w -e net.ipv6.conf.$i.disable_ipv6=1 net.ipv6.conf.$i.autoconf=0 net.ipv6.conf.$i.accept_ra=0
  sysctl -q -w -e net.ipv6.conf.$i.disable_ipv6=1 net.ipv6.conf.$i.autoconf=0
done

ip addr add $IP dev $IF
ip link set lo up
ip link set $IF up

# TODO
# - bind-mount or overwrite /etc/resolv.conf, /etc/hosts and /etc/hostname

route add default gw $GW
#echo nameserver $GW >/etc/resolv.conf

# Setup hostname
hostname -F /etc/hostname

# Mount filesystems defined in /etc/fstab OR as defined in DKVM_DISKS
if [ -f /.dkvm/fstab ]; then
  busybox modprobe ext4
  mount -av --fstab /.dkvm/fstab
fi

# Load original environment
. /.dkvm/export

if [ "$DKVM_INIT" = "1" ]; then
  # If launched with '--init' (or --env=DKVM_INIT=1) then run our own init in place of Docker's/Podman's.

  cat >/etc/inittab <<_EOE_
ttyS0::respawn:-/opt/dkvm/scripts/dkvm-vm-start
::respawn:/opt/dkvm/scripts/dkvm-vm-qemu-ga
::ctrlaltdel:/opt/dkvm/bin/poweroff
::restart:/opt/dkvm/bin/poweroff
_EOE_

  # Allow dkvm-vm-start to runs once (and only once)
  rm -f /.dkvm/once

  # Run our own init
  exec -c /opt/dkvm/bin/init
else
  # If not, assume the user knows what they're doing: launch qemu-ga and just run their entrypoint.

  # Load original entrypoint
  mapfile -t ARGS <<< $(cat /.dkvm/entrypoint)

  # Run the qemu guest agent, needed to support 'docker exec'

  # TODO:
  # - Add option to inhibit this
  /opt/dkvm/scripts/dkvm-vm-qemu-ga &

  # Run init from the image
  exec -c "${ARGS[@]}"
fi
