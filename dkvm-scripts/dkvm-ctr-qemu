#!/opt/dkvm/bin/bash

. /opt/dkvm/scripts/dkvm-ctr-defaults

# TODO: Clean up ENV vars
. /.dkvm/export

# BREAK="break=mountroot"
PANIC="panic=-1"
# OPTS="cgroup_enable=memory swapaccount=1 apparmor=0 systemd.unified_cgroup_hierarchy=0"

INIT="init=/opt/dkvm/scripts/dkvm-vm-init"

SERIAL="mon:stdio"
# SERIAL="stdio"

# CONSOLE="-display curses"
CONSOLE="-nographic"

DOCKER_IP=$(cat /.dkvm/net)
MAC=$(printf "52:54:00:%02x:%02x:%02x" $(echo $DOCKER_IP | cut -d'/' -f1 | cut -d'.' -f2,3,4 | tr '.' ' '))

# e.g. ext4,5G,/volume/disk1,/var/lib/docker
do_disk() {
  local spec="$1"
  local src dst fs size

  read src dst fs size <<< $(echo "$spec" | tr ',' ' ')

  if [[ -n "$src" && ! -f "$src" ]]; then
    busybox truncate -s "$size" "$src" >&2
    mke2fs -F -t "$fs" "$src" >&2
  fi

  if [[ -n "$src" && -f "$src" ]]; then
    UUID=$(blkid -o value "$src" | head -n 1)
    mkdir -p "$DKVM_VM_MOUNTPOINT/$dst" >&2
    echo "UUID=$UUID $dst $fs defaults,noatime 0 0" >>/.dkvm/fstab
    DISKS+=("-drive file=$src,format=raw,if=virtio,index=3,media=disk")
  fi
}

DISKS=()
if [ -n "$DKVM_DISKS" ]; then
  do_disk "$DKVM_DISKS"
fi

echo "DISKS: ${DISKS[@]}"
bash && exit 0

# TODO:
# - Consider using '-device pvpanic'

QEMU_OPTS=(-device isa-debug-exit)

exec qemu-system-x86_64 \
  -enable-kvm \
  $CONSOLE \
  -no-user-config \
  -nodefaults \
  -serial $SERIAL \
  -m "$DKVM_DEV_SHM_SIZE" \
  -cpu host \
  -machine q35,accel=kvm,usb=off \
  -chardev socket,id=char0,path=$QEMU_VIRTIOFSD_SOCKET -device vhost-user-fs-pci,queue-size=1024,chardev=char0,tag=myfs,ats=on \
  -kernel $DKVM_KERNEL_PATH \
  -initrd $DKVM_KERNEL_INITRAMFS_PATH \
  -append "rootfstype=virtiofs root=myfs rw nomodeset $BREAK $INIT console=ttyS0 net.ifnames=0 $PANIC $OPTS $DKVM_KERNEL_ARGS" \
  -object memory-backend-file,id=mem,size="$DKVM_DEV_SHM_SIZE",mem-path=/dev/shm,share=on \
  -numa node,memdev=mem \
  -nic tap,id=qemu0,model=virtio-net-pci,script=$QEMU_IFUP,downscript=$QEMU_IFDOWN,mac=$MAC \
  -no-reboot \
  ${DISKS[@]} \
  -action panic=none -action reboot=shutdown \
  -monitor unix:$QEMU_MONITOR_SOCKET,server,nowait \
  -chardev socket,id=charchannel0,path=$QEMU_GUEST_AGENT,server=on,wait=off \
  -device virtio-serial \
  -device virtserialport,chardev=charchannel0,name=org.qemu.guest_agent.0 \
  "${QEMU_OPTS[@]}"
}

# DEBUG: ENABLE TO SKIP QEMU BOOT AND INSTEAD FALL INTO CONTAINER SHELL
# exec "/bin/bash"

